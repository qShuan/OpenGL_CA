#include <GL/glew.h>
#include <GLFW/glfw3.h>

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>

#include "ErrorHandling.h"
#include "VertexBuffer.h"
#include "IndexBuffer.h"
#include "ShaderStorageBuffer.h"
#include <vector>

#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>

#include "Shader.h"
#include "Elements.h"
#include <glm/gtc/type_ptr.hpp>
#include "FPS.h"

#define TARGET_FPS 120
#define WIDTH 1280
#define HEIGHT 720
#define SIZE WIDTH * HEIGHT

struct cell {

    glm::ivec4 LogicInfo;

    glm::vec2 TemperatureAndLife;

    glm::vec2 padding;

    glm::vec4 Col;

};

cell cell_e();
cell cell_s();
cell cell_w();

cell cell_e() {

    cell p;

    p.LogicInfo = glm::ivec4(EMPTY, 0, 0, 0);
    p.Col = glm::vec4(0.3, 0.3, 0.3, 1);

    p.TemperatureAndLife = glm::vec2(25, 0);

    return p;
}
cell cell_s() {

    cell p;

    p.LogicInfo = glm::ivec4(SAND, 0, 0, 0);

    p.Col = glm::vec4(0.8, 0.7, 0.3, 1); // Sandy yellow Color

    p.TemperatureAndLife = glm::vec2(25, 0);


    return p;
}

cell cell_w() {

    cell p;

    p.LogicInfo = glm::ivec4(WATER, 0, 0, 0);

    p.Col = glm::vec4(0, 0, 1, 1);

    p.TemperatureAndLife = glm::vec2(25, 0);

    return p;
}

void addCell(int x, int y, cell* cells) {

    if (x >= WIDTH || x < 0 || y >= HEIGHT || y < 0) return;

    int index = WIDTH * y + x;

    if (cells[index].LogicInfo.x != EMPTY) return;

    cells[index] = cell_s();
    glBufferSubData(GL_SHADER_STORAGE_BUFFER, index * sizeof(cell), sizeof(cell), &cells[index]);
}

void drawCircle(int x, int y, int radius, cell* cells) {

    int rSquared = radius * radius;

    for (int u = x - radius; u < x + radius + 1; u++) {
        for (int v = y - radius; v < y + radius + 1; v++) {
            if ((x - u) * (x - u) + (y - v) * (y - v) < rSquared)
            {
                addCell(u, v, cells);
            }
        }
    }
}

void mouse_button_callback(GLFWwindow* window, int button, int action, double* xpos, double* ypos)
{
    if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS)
    {
        //getting cursor position
        glfwGetCursorPos(window, xpos, ypos);

        *ypos = HEIGHT - *ypos;
    }
}


int main(void) {

    srand(time(NULL));

    GLFWwindow* window;

    /* Initialize the library */
    if (!glfwInit())
        return -1;

    /* Create a windowed mode window and its OpenGL context */
    window = glfwCreateWindow(WIDTH, HEIGHT, "window", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        return -1;
    }


    /* Make the window's context current */
    glfwMakeContextCurrent(window);

    if (glewInit() != GLEW_OK) {

        std::cout << "GlewInit ERROR" << std::endl;
    }


    //Print OpenGL version
    std::cout << "Version: " << glGetString(GL_VERSION) << std::endl;
    {
        FPS fps;

        cell* cells = new cell[SIZE];

        if (!cells) return -4;


        for (int i = 0; i < SIZE; ++i) {

            cells[i] = cell_e();
        }

        // Define quad vertices
        float vertices[] = {

             0, -0,
             WIDTH, 0,
             WIDTH,  HEIGHT,
            -0,  HEIGHT,
        };
        unsigned int indices[] = {

            0, 1, 2,
            2, 3, 0
        };

        unsigned int vao;
        GLCall(glGenVertexArrays(1, &vao));
        GLCall(glBindVertexArray(vao));
        glObjectLabel(GL_VERTEX_ARRAY, vao, -1, "Vertex Array Object");

        unsigned int vbo;
        glGenBuffers(1, &vbo);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
        glObjectLabel(GL_BUFFER, vbo, -1, "Vertex Buffer Object");

        glEnableVertexAttribArray(0);
        glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, sizeof(float) * 2, 0);

        unsigned int ib;
        glGenBuffers(1, &ib);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ib);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, 6 * sizeof(unsigned int), indices, GL_STATIC_DRAW);
        glObjectLabel(GL_BUFFER, ib, -1, "Index Buffer Object");

        unsigned int ssbo;
        glGenBuffers(1, &ssbo);
        glBindBuffer(GL_SHADER_STORAGE_BUFFER, ssbo);
        glBufferData(GL_SHADER_STORAGE_BUFFER, SIZE * sizeof(cell), cells, GL_DYNAMIC_DRAW);
        glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 0, ssbo);
        glObjectLabel(GL_BUFFER, ssbo, -1, "Shader Storage Buffer Object");


        glm::mat4 projMat = glm::ortho(0.f, (float)WIDTH, 0.f, (float)HEIGHT, .0f, 1.f);

        Shader shader("Simulation.shader");
        shader.Bind();


        int u_MVPLocation = glGetUniformLocation(shader.m_rendererID, "u_MVP");
        GLCall(glUniform1i(glGetUniformLocation(shader.m_rendererID, "width"), WIDTH));
        GLCall(glUniform1i(glGetUniformLocation(shader.m_rendererID, "height"), HEIGHT));
        GLCall(glUniformMatrix4fv(u_MVPLocation, 1, GL_FALSE, &projMat[0][0]));


        GLCall(glBindVertexArray(0));
        shader.Unbind();


        double lasttime = glfwGetTime();
        double lastUpdateTime = 0;

        /* Loop until the user closes the window */
        while (!glfwWindowShouldClose(window))
        {
            
            /* Render here */
            glClear(GL_COLOR_BUFFER_BIT);

            GLCall(glBindVertexArray(vao));
            shader.Bind();

            double now = glfwGetTime();
            double deltaTime = now - lastUpdateTime;

            //Fps Limit
            while (glfwGetTime() < lasttime + 1.0 / TARGET_FPS) {}


            //Display FPS
            fps.update();
            int fps_num = fps.getFPS();
            auto s_fps = std::to_string(fps_num);
            glfwSetWindowTitle(window, s_fps.c_str());


            int state = glfwGetMouseButton(window, GLFW_MOUSE_BUTTON_LEFT);
            if (state == GLFW_PRESS)
            {
                double xpos, ypos;

                mouse_button_callback(window, GLFW_MOUSE_BUTTON_LEFT, state, &xpos, &ypos);


                //std::cout << "Cursor Position at (" << x << " : " << y << ")" << std::endl;

                if (ypos >= HEIGHT || ypos < 0 || xpos < 0 || xpos >= WIDTH) continue;


                drawCircle((int)xpos, (int)ypos, 100, cells);
            }


            GLCall(glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0));


            /* Swap front and back buffers */
            glfwSwapBuffers(window);

            /* Poll for and process events */
            glfwPollEvents();


            lasttime += 1.0 / TARGET_FPS;
            lastUpdateTime = now;

        }


        GLCall(glBindVertexArray(0));
    }


    glfwTerminate();
    return 0;
}


SHADER:
#shader vertex
#version 430

layout(location = 0) in vec2 inPosition;

uniform mat4 u_MVP;

void main() {

    gl_Position = u_MVP * vec4(inPosition, 0.0, 1.0);
}

#shader fragment
#version 430

out vec4 fragColor;

struct cell {
    ivec4 LogicInfo;            // (type, isBurning, isFalling, moved_last_frame)
    vec2 TemperatureAndLife;    // (temperature, life)
    vec4 Col;                   // Col is a vec4 representing color components
};

layout(std430, binding = 0) buffer CellData {
    cell cells[];
};


uniform int width;
uniform int height;

#define EMPTY 0
#define SAND 2
#define WATER 3

//https://stackoverflow.com/questions/53500550/generating-a-pseudo-random-number-between-0-an-1-glsl-es
float random(vec2 st)
{
    return fract(sin(dot(st.xy, vec2(12.9898, 78.233))) * 43758.5453123);
}

bool inBounds(int x, int y) {

    if (x < 0 || x >= width || y < 0 || y >= height) return false;

    return true;
}

bool isEmpty(int x, int y) {

    if (!inBounds(x, y)) return false;

    if (cells[width * y + x].LogicInfo.x == EMPTY) return true;

    return false;
}

void swap(int x1, int y1, int x2, int y2) {

    int index1 = y1 * width + x1;
    int index2 = y2 * width + x2;

    cell temp = cells[index1];
    cells[index1] = cells[index2];
    cells[index2] = temp;
}

void updateSand(int x, int y) {

    float left = random(vec2(0, 1));

    int offset = 0;

    if (left > 0.5f)
        offset = -1;
    else
        offset = 1;

    if (isEmpty(x, y - 1)) {

        swap(x, y, x, y - 1);
    }
    else if (isEmpty(x - offset, y - 1)) {
        swap(x, y, x - offset, y - 1);
    }
    else if (isEmpty(x + offset, y - 1)) {
        swap(x, y, x + offset, y - 1);
    }
}


void main() {

    int x = int(gl_FragCoord.x);
    int y = int(gl_FragCoord.y);

    int index = y * width + x;
    cell currentCell = cells[index];

    if (currentCell.LogicInfo.x == SAND)
        updateSand(x, y);

    if (currentCell.LogicInfo.x == SAND)
        fragColor = vec4(1, 1, 1, 1);
    else
        fragColor = currentCell.Col;
}


SHADER.CPP
#include "Shader.h"

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>

#include "ErrorHandling.h"


Shader::Shader(const std::string& filepath)
	: m_filepath(filepath), m_rendererID(0)
{

    ShaderSources source = ParseShader(filepath);

    if(filepath == "ComputeShader.shader")
        m_rendererID = CreateComputeShader(source.ComputeSource);
    else
        m_rendererID = CreateShader(source.VertexSource, source.FragmentSource);

    //uMVPlocation = glGetUniformLocation(m_rendererID, "u_MVP");
}

Shader::~Shader()
{
    GLCall(glDeleteProgram(m_rendererID));
}

ShaderSources Shader::ParseShader(const std::string& filePath) {

    std::fstream stream(filePath);

    enum class ShaderType {

        NONE = -1, VERTEX = 0, FRAGMENT = 1, COMPUTE = 2
    };

    std::string line;
    std::stringstream ss[3];
    ShaderType type = ShaderType::NONE;
    while (getline(stream, line)) {

        if (line.find("#shader") != std::string::npos) {

            if (line.find("vertex") != std::string::npos) {

                type = ShaderType::VERTEX;
            }
            else if (line.find("fragment") != std::string::npos) {

                type = ShaderType::FRAGMENT;
            }
            else if (line.find("compute") != std::string::npos) {

                type = ShaderType::COMPUTE;
            }
        }
        else {

            ss[(int)type] << line << '\n';
        }
    }

    return { ss[0].str(), ss[1].str(), ss[2].str()};
}

unsigned int Shader::CompileShader(unsigned int type, std::string& source) {

    unsigned int id = glCreateShader(type);
    const char* src = source.c_str();

    glShaderSource(id, 1, &src, nullptr);
    glCompileShader(id);

    int result;
    glGetShaderiv(id, GL_COMPILE_STATUS, &result);

    if (result == GL_FALSE) {

        int length;
        glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length);

        char* message = (char*)malloc(sizeof(char) * length);
        if (!message) {

            std::cout << "Failed to allocate memory for message!" << std::endl;
            return 0;
        }

        glGetShaderInfoLog(id, length, &length, message);

        std::cout << "Failed to compile " << (type == GL_VERTEX_SHADER ?  "vertex" : type == GL_COMPUTE_SHADER ? "compute" : "fragment") << " shader" << std::endl;
        std::cout << message << std::endl;

        glDeleteShader(id);

        return 0;
    }

    return id;
}

int Shader::CreateShader(std::string& vertexShader, std::string& fragmentShader) {

    unsigned int program = glCreateProgram();
    unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertexShader);
    unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader);

    if (vs == 0 || fs == 0) {
        glDeleteProgram(program);
        return 0;
    }

    glAttachShader(program, vs);
    glAttachShader(program, fs);
    glLinkProgram(program);

    int linkStatus;
    glGetProgramiv(program, GL_LINK_STATUS, &linkStatus);
    if (linkStatus == GL_FALSE) {
        int length;
        glGetProgramiv(program, GL_INFO_LOG_LENGTH, &length);
        std::vector<char> message(length);
        glGetProgramInfoLog(program, length, &length, message.data());
        std::cerr << "Failed to link program:\n" << message.data() << std::endl;

        glDeleteProgram(program);
        return 0;
    }

    glDeleteShader(vs);
    glDeleteShader(fs);

    return program;
}

int Shader::CreateComputeShader(std::string& computeShader) {

    unsigned int program = glCreateProgram();
    unsigned int cs = CompileShader(GL_COMPUTE_SHADER, computeShader);

    if (cs == 0) {
        glDeleteProgram(program);
        return 0;
    }

    glAttachShader(program, cs);
    glLinkProgram(program);

    int linkStatus;
    glGetProgramiv(program, GL_LINK_STATUS, &linkStatus);
    if (linkStatus == GL_FALSE) {
        int length;
        glGetProgramiv(program, GL_INFO_LOG_LENGTH, &length);
        std::vector<char> message(length);
        glGetProgramInfoLog(program, length, &length, message.data());
        std::cerr << "Failed to link compute program:\n" << message.data() << std::endl;

        glDeleteProgram(program);
        return 0;
    }

    glDeleteShader(cs);

    return program;
}

void Shader::Bind() const
{
    GLCall(glUseProgram(m_rendererID));
}

void Shader::Unbind() const
{
    GLCall(glUseProgram(0));
}
