#include <GL/glew.h>
#include <GLFW/glfw3.h>
#include <iostream>
#include <fstream>
#include <string>
#include <sstream>
#include <vector>
#include <glm/glm.hpp>
#include <glm/gtc/matrix_transform.hpp>
#include "Shader.h"
#include "ErrorHandling.h"
#include "VertexBuffer.h"
#include "IndexBuffer.h"
#include "ShaderStorageBuffer.h"
#include "Elements.h"
#include "FPS.h"

#define TARGET_FPS 100
#define WIDTH 1280
#define HEIGHT 720
#define SIZE (WIDTH * HEIGHT)

struct cell {
    int type;
    bool isBurning;
    bool isFalling;
    bool moved_last_frame;
    float temperature;
    float life;
    glm::vec4 col;
};

cell cell_e() {
    cell p = { EMPTY, false, false, false, 20.f, 0.f, glm::vec4(0, 0, 0, 1) };
    return p;
}

cell cell_s() {
    cell p = { SAND, false, false, false, 0.f, 0.f, glm::vec4(1, 0, 0, 1) };
    p.temperature = randomBetween(30.f, 36.f);
    p.life = randomBetween(2.f, 5.f);
    return p;
}

cell cell_w() {
    cell p = { WATER, false, false, false, 0.f, 0.f, glm::vec4(0, 0, 1, 1) };
    p.temperature = randomBetween(30.f, 36.f);
    p.life = randomBetween(2.f, 5.f);
    return p;
}

void mouse_button_callback(GLFWwindow* window, int button, int action, double* xpos, double* ypos) {
    if (button == GLFW_MOUSE_BUTTON_LEFT && action == GLFW_PRESS) {
        glfwGetCursorPos(window, xpos, ypos);
        *ypos = HEIGHT - *ypos;
    }
}

int main(void) {
    srand(time(NULL));

    GLFWwindow* window;

    // Initialize the library
    if (!glfwInit())
        return -1;

    // Create a windowed mode window and its OpenGL context
    window = glfwCreateWindow(WIDTH, HEIGHT, "window", NULL, NULL);
    if (!window) {
        glfwTerminate();
        return -1;
    }

    // Make the window's context current
    glfwMakeContextCurrent(window);

    if (glewInit() != GLEW_OK) {
        std::cout << "GlewInit ERROR" << std::endl;
    }

    // Print OpenGL version
    std::cout << "Version: " << glGetString(GL_VERSION) << std::endl;

    {
        FPS fps;

        cell* cells = new cell[SIZE];
        if (!cells) return -4;

        for (int i = 0; i < SIZE; ++i) {
            cells[i] = cell_w();
        }

        cells[WIDTH * (HEIGHT - 1) + 0] = cell_s(); // Top-left corner
        cells[WIDTH * (HEIGHT - 1) + (WIDTH - 1)] = cell_s(); // Top-right corner
        cells[0] = cell_s(); // Bottom-left corner
        cells[WIDTH * (HEIGHT / 2) + WIDTH / 2] = cell_s(); // Bottom-right corner

        // Define quad vertices
        float vertices[] = {
            -1.0f, -1.0f, 0.0f, 0.0f,
             1.0f, -1.0f, 1.0f, 0.0f,
             1.0f,  1.0f, 1.0f, 1.0f,
            -1.0f,  1.0f, 0.0f, 1.0f
        };

        unsigned int indices[] = {
            0, 1, 2,
            2, 3, 0
        };

        // Vertex Array Object
        unsigned int vao;
        glGenVertexArrays(1, &vao);
        glBindVertexArray(vao);
        glObjectLabel(GL_VERTEX_ARRAY, vao, -1, "Vertex Array Object");

        // Vertex Buffer Object
        unsigned int vbo;
        glGenBuffers(1, &vbo);
        glBindBuffer(GL_ARRAY_BUFFER, vbo);
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);
        glObjectLabel(GL_BUFFER, vbo, -1, "Vertex Buffer Object");

        // Index Buffer Object
        unsigned int ibo;
        glGenBuffers(1, &ibo);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, ibo);
        glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);
        glObjectLabel(GL_BUFFER, ibo, -1, "Index Buffer Object");

        // Vertex Attributes
        glVertexAttribPointer(0, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*)0);
        glEnableVertexAttribArray(0);

        glVertexAttribPointer(1, 2, GL_FLOAT, GL_FALSE, 4 * sizeof(float), (void*)(2 * sizeof(float)));
        glEnableVertexAttribArray(1);


        Shader shaderProgram("Simulation.shader");
        shaderProgram.Bind();
        Shader computeShaderProgram("ComputeShader.shader");
        computeShaderProgram.Bind();

        // Texture
        GLuint texture;
        glGenTextures(1, &texture);
        glBindTexture(GL_TEXTURE_2D, texture);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexImage2D(GL_TEXTURE_2D, 0, GL_RGBA32F, WIDTH, HEIGHT, 0, GL_RGBA, GL_FLOAT, NULL);

        // Shader Storage Buffer Object (SSBO)
        GLuint ssbo;
        glGenBuffers(1, &ssbo);
        glBindBuffer(GL_SHADER_STORAGE_BUFFER, ssbo);
        glBufferData(GL_SHADER_STORAGE_BUFFER, SIZE * sizeof(cell), cells, GL_DYNAMIC_COPY);
        glBindBufferBase(GL_SHADER_STORAGE_BUFFER, 0, ssbo);
        glObjectLabel(GL_BUFFER, ssbo, -1, "Shader Storage Buffer Object");

        glUniform1i(glGetUniformLocation(computeShaderProgram.m_rendererID, "width"), WIDTH);
        glUniform1i(glGetUniformLocation(computeShaderProgram.m_rendererID, "height"), HEIGHT);
        glBindImageTexture(1, texture, 0, GL_FALSE, 0, GL_WRITE_ONLY, GL_RGBA32F);

        // Main loop
        while (!glfwWindowShouldClose(window)) {
            // Compute shader dispatch
            computeShaderProgram.Bind();
            glDispatchCompute((GLuint)WIDTH / 16, (GLuint)HEIGHT / 16, 1);
            glMemoryBarrier(GL_SHADER_IMAGE_ACCESS_BARRIER_BIT);

            // Render the texture
            shaderProgram.Bind();
            glBindVertexArray(vao);
            glActiveTexture(GL_TEXTURE0);
            glBindTexture(GL_TEXTURE_2D, texture);
            glUniform1i(glGetUniformLocation(shaderProgram.m_rendererID, "img_output"), 0);
            glDrawElements(GL_TRIANGLES, 6, GL_UNSIGNED_INT, 0);

            glfwSwapBuffers(window);
            glfwPollEvents();
        }

        delete[] cells;
    }

    glfwTerminate();
    return 0;
}







VERTEX AND FRAGMENT:

#shader vertex
#version 430

layout(location = 0) in vec2 inPosition;
layout(location = 1) in vec2 inTexCoord;

out vec2 TexCoord;

void main() {
    gl_Position = vec4(inPosition, 0.0, 1.0);
    TexCoord = inTexCoord;
}

#shader fragment
#version 430

in vec2 TexCoord;
out vec4 fragColor;

uniform sampler2D img_output;

void main() {
    fragColor = texture(img_output, TexCoord);
}
